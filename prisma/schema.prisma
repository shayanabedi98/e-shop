datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    hashedPassword String?
    role           Role      @default(USER)
    accounts       Account[]
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    Session        Session[]
    orders         Order[]
}

model Order {
    id              String            @id @default(auto()) @map("_id") @db.ObjectId
    userId          String            @db.ObjectId
    amount          Float
    currency        String
    status          String
    deliveryStatus  String?
    createDate      DateTime          @default(now())
    paymentIntentId String            @unique
    products        CartProductType[]
    address         Address?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    USER
    ADMIN
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// model VerificationToken {
//     id         String   @id @default(auto()) @map("_id") @db.ObjectId
//     identifier String
//     token      String
//     expires    DateTime

//     @@unique([identifier, token])
// }

// Optional for WebAuthn support
// model Authenticator {
//     credentialID         String  @id @map("_id")
//     userId               String  @db.ObjectId
//     providerAccountId    String
//     credentialPublicKey  String
//     counter              Int
//     credentialDeviceType String
//     credentialBackedUp   Boolean
//     transports           String?

//     user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([userId, credentialID])
// }

type CartProductType {
    id          String
    name        String
    description String
    category    String
    brand       String
    selectedImg Image
    quantity    Int
    price       Float
}

type Image {
    color     String
    colorCode String
    image     String
}

type Address {
    city        String
    country     String
    line1       String
    line2       String?
    postal_code String
    state       String
}
